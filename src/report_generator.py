from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
)
from datetime import datetime
import os

# === Dummy Data (Replace these with real project outputs) ===
metrics = {
    "Annualized Return": 0.1423,
    "Annualized Volatility": 0.2111,
    "Sharpe Ratio": 1.35,
    "Max Drawdown": -0.183,
    "Calmar Ratio": 0.78
}

plot_paths = [
    "./outputs/plots/cumulative_returns.png",
    "./outputs/plots/return_distribution.png",
    "./outputs/plots/rolling_volatility_20d.png",
    "./outputs/plots/correlation_heatmap.png",
    "./outputs/plots/drawdowns.png",
    "./outputs/plots/portfolio_weights_over_time.png",
    "./outputs/plots/portfolio_performance.png",
    "./outputs/plots/asset_allocation_pie_20250524.png",
    "./outputs/plots/efficient_frontier.png"
]

output_path = "./outputs/reports/portfolio_report.pdf"

# === Report Generator ===
def generate_pdf_report(metrics, plot_paths, output_path):
    doc = SimpleDocTemplate(output_path, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    # === Title and Timestamp ===
    title = Paragraph("Portfolio Optimization Report", styles["Title"])
    date_str = Paragraph(f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles["Normal"])
    story.extend([title, date_str, Spacer(1, 12)])

    # === Section: Metrics Table ===
    story.append(Paragraph("Performance Summary", styles["Heading2"]))
    data = [["Metric", "Value"]]
    for key, value in metrics.items():
        if "Drawdown" in key or "Return" in key or "Volatility" in key:
            value_str = f"{value:.2%}"
        else:
            value_str = f"{value:.4f}"
        data.append([key, value_str])

    table = Table(data, colWidths=[200, 200])
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.black),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("ALIGN", (1, 1), (-1, -1), "CENTER")
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    # === Section: Commentary ===
    story.append(Paragraph("Key Insights and Recommendations", styles["Heading2"]))
    comments = []

    sharpe = metrics.get("Sharpe Ratio", 0)
    if sharpe > 1.5:
        comments.append(f"Strong risk-adjusted return (Sharpe Ratio: {sharpe:.2f}).")
    elif 1.0 <= sharpe <= 1.5:
        comments.append(f"Moderate risk-adjusted performance (Sharpe Ratio: {sharpe:.2f}).")
    else:
        comments.append(f"Low risk-adjusted return (Sharpe Ratio: {sharpe:.2f}).")

    max_dd = metrics.get("Max Drawdown", 0)
    if max_dd > -0.15:
        comments.append(f"Drawdown is reasonably contained at {max_dd:.2%}.")
    else:
        comments.append(f"Significant drawdown observed: {max_dd:.2%}.")

    ret = metrics.get("Annualized Return", 0)
    if ret > 0.15:
        comments.append(f"Excellent annualized return: {ret:.2%}.")
    elif ret > 0.08:
        comments.append(f"Return aligns with market expectations: {ret:.2%}.")
    else:
        comments.append(f"Underperforming return: {ret:.2%}.")

    for comment in comments:
        story.append(Paragraph(f"- {comment}", styles["Normal"]))
    story.append(Spacer(1, 12))

    # === Section: Plots ===
    story.append(PageBreak())
    story.append(Paragraph("Visualizations", styles["Heading2"]))

    for path in plot_paths:
        if os.path.exists(path):
            story.append(Spacer(1, 6))
            story.append(Paragraph(os.path.basename(path).replace("_", " ").title(), styles["Heading3"]))
            story.append(Image(path, width=6.5 * inch, height=4 * inch))
            story.append(PageBreak())

    # === Build PDF ===
    doc.build(story)
    print(f"Report successfully saved to: {output_path}")

# === Run if main ===
if __name__ == "__main__":
    # Create the output directories if they don't exist
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    for plot_path in plot_paths:
        os.makedirs(os.path.dirname(plot_path), exist_ok=True)
        # Create dummy plot files if they don't exist, so the report can be generated
        # In a real scenario, these would be generated by your analysis scripts
        if not os.path.exists(plot_path):
            from PIL import Image as PILImage # Using PIL to create a dummy image
            dummy_image = PILImage.new('RGB', (650, 400), color = (73, 109, 137))
            dummy_image.save(plot_path)


    generate_pdf_report(metrics, plot_paths, output_path)